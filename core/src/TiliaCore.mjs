// Generated by ReScript, PLEASE EDIT WITH CARE


var object = (function(v) {
  return typeof v === 'object' && v !== null;
});

function readonly(o, k) {
  var d = Object.getOwnPropertyDescriptor(o, k);
  if (d === null || d === undefined) {
    return false;
  } else {
    return d.writable === false;
  }
}

var indexKey = (Symbol());

var triggerKey = (Symbol());

var rootKey = (Symbol());

var metaKey = (Symbol());

function _meta(p) {
  return Reflect.get(p, metaKey);
}

function _connect(p, notify) {
  var root = Reflect.get(p, rootKey);
  if (root === null || root === undefined) {
    if (root === null) {
      throw new Error("Observed state is not a tilia proxy.");
    }
    throw new Error("Observed state is not a tilia proxy.");
  } else {
    var observer_observing = [];
    var observer = {
      notify: notify,
      observing: observer_observing,
      root: root
    };
    root.observer = observer;
    return observer;
  }
}

function observeKey(observed, key) {
  var w = observed.get(key);
  if (!(w === null || w === undefined)) {
    return w;
  }
  w === null;
  var w$1 = {
    state: "Pristine",
    key: key,
    observed: observed,
    observers: new Set()
  };
  observed.set(key, w$1);
  return w$1;
}

function clear(observer) {
  observer.observing.forEach(function (watchers) {
        if (watchers.state === "Pristine" && watchers.observers.delete(observer) && watchers.observers.size === 0) {
          watchers.state = "Cleared";
          watchers.observed.delete(watchers.key);
          return ;
        }
        
      });
}

function _ready(observer, notifyIfChangedOpt) {
  var notifyIfChanged = notifyIfChangedOpt !== undefined ? notifyIfChangedOpt : true;
  var root = observer.root;
  var o = root.observer;
  if (o === null || o === undefined) {
    o === null;
  } else if (o === observer) {
    root.observer = undefined;
  }
  observer.observing.find(function (w, idx) {
        var match = w.state;
        switch (match) {
          case "Pristine" :
              w.observers.add(observer);
              return false;
          case "Changed" :
              if (notifyIfChanged) {
                clear(observer);
                observer.notify();
                return true;
              }
              break;
          case "Cleared" :
              break;
          
        }
        var w$1 = observeKey(w.observed, w.key);
        w$1.observers.add(observer);
        observer.observing[idx] = w$1;
        return false;
      });
}

function callTrackers(observed) {
  var watchers = observed.get(triggerKey);
  if (watchers === null || watchers === undefined) {
    return ;
  }
  observed.delete(triggerKey);
  watchers.observers.forEach(function (observer) {
        observer.notify();
      });
  observed.set(triggerKey, watchers);
}

function notify(observed, key, trigger) {
  var watchers = observed.get(key);
  if (watchers === null || watchers === undefined) {
    watchers === null;
  } else {
    observed.delete(key);
    watchers.state = "Changed";
    watchers.observers.forEach(function (observer) {
          clear(observer);
          observer.notify();
        });
  }
  if (trigger) {
    return callTrackers(observed);
  }
  
}

function proxify(root, parentObserved, _target) {
  while(true) {
    var target = _target;
    var observed = new Map();
    var proxied = new Map();
    var propagate_notify = function () {
      callTrackers(parentObserved);
    };
    var propagate_observing = [];
    var propagate = {
      notify: propagate_notify,
      observing: propagate_observing,
      root: root
    };
    var w = observeKey(observed, triggerKey);
    w.observers.add(propagate);
    propagate_observing.push(w);
    var r = Reflect.get(target, rootKey);
    if (r === null || r === undefined) {
      r === null;
    } else {
      if (r === root) {
        return target;
      }
      _target = _meta(target).target;
      continue ;
    }
    return new Proxy(target, {
                set: (function(observed,proxied){
                return function (extra, extra$1, extra$2) {
                  var hadKey = Reflect.has(extra, extra$1);
                  var prev = Reflect.get(extra, extra$1);
                  if (prev === extra$2) {
                    return true;
                  } else if (Reflect.set(extra, extra$1, extra$2)) {
                    if (object(prev)) {
                      proxied.delete(extra$1);
                    }
                    notify(observed, extra$1, true);
                    if (!hadKey) {
                      notify(observed, indexKey, false);
                    }
                    return true;
                  } else {
                    return false;
                  }
                }
                }(observed,proxied)),
                deleteProperty: (function(observed,proxied){
                return function (extra, extra$1) {
                  var res = Reflect.deleteProperty(extra, extra$1);
                  proxied.delete(extra$1);
                  notify(observed, extra$1, true);
                  return res;
                }
                }(observed,proxied)),
                get: (function(target,observed,proxied){
                return function (extra, extra$1) {
                  var isArray = Array.isArray(target);
                  if (extra$1 === rootKey) {
                    return root;
                  }
                  if (extra$1 === metaKey) {
                    return ({root, target, observed, proxied});
                  }
                  var v = Reflect.get(extra, extra$1);
                  var own = Object.hasOwn(extra, extra$1);
                  if (!(v === undefined || own)) {
                    return v;
                  }
                  var o = root.observer;
                  if (o === null || o === undefined) {
                    o === null;
                  } else if (isArray && extra$1 === "length") {
                    var w = observeKey(observed, indexKey);
                    o.observing.push(w);
                  } else {
                    var w$1 = observeKey(observed, extra$1);
                    o.observing.push(w$1);
                  }
                  if (!(object(v) && !readonly(extra, extra$1))) {
                    return v;
                  }
                  var p = proxied.get(extra$1);
                  if (!(p === null || p === undefined)) {
                    return p;
                  }
                  p === null;
                  var p$1 = proxify(root, observed, v);
                  proxied.set(extra$1, p$1);
                  return p$1;
                }
                }(target,observed,proxied)),
                ownKeys: (function(observed){
                return function (extra) {
                  var keys = Reflect.ownKeys(extra);
                  var o = root.observer;
                  if (o === null || o === undefined) {
                    o === null;
                  } else {
                    var w = observeKey(observed, indexKey);
                    o.observing.push(w);
                  }
                  return keys;
                }
                }(observed))
              });
  };
}

function make(seed) {
  var root = {
    observer: undefined
  };
  var parentObserved = new Map();
  return proxify(root, parentObserved, seed);
}

function observe(p, callback) {
  var notify = function () {
    var o = _connect(p, notify);
    callback(p);
    _ready(o, false);
  };
  notify();
}

function track(p, callback) {
  var match = Reflect.get(p, metaKey);
  if (match === null || match === undefined) {
    if (match === null) {
      throw new Error("Observed state is not a tilia proxy.");
    }
    throw new Error("Observed state is not a tilia proxy.");
  } else {
    var observer_notify = function () {
      callback(p);
    };
    var observer_observing = [];
    var observer_root = match.root;
    var observer = {
      notify: observer_notify,
      observing: observer_observing,
      root: observer_root
    };
    var w = observeKey(match.observed, triggerKey);
    w.observers.add(observer);
    observer_observing.push(w);
    return observer;
  }
}

export {
  make ,
  observe ,
  track ,
  clear ,
  _connect ,
  _ready ,
  _meta ,
}
/* indexKey Not a pure module */
