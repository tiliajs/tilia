declare const o: unique symbol;
declare const r: unique symbol;
declare const t: unique symbol;
export type observer = { readonly [o]: true };
export type root = { readonly [r]: true };
export type tilia<a> = { readonly [t]: a };
export function make<a extends object>(t: a): tilia<a>;
export function _connect<a>(tree: tilia<a>, callback: () => void): observer;
export function _flush(observer: observer): void;
export function _clear(observer: observer): void;
export function observe<a>(tree: tilia<a>, fn: (t: a) => void): void;
