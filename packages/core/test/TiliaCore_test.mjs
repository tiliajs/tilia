// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as TiliaCore from "../src/TiliaCore.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var make = (() => ({}));

var $$Object = {
  make: make
};

Ava("Should track leaf changes", (function (t) {
        var m = {
          called: false
        };
        var p = {
          name: "John",
          username: "jo"
        };
        var x = TiliaCore.make(p);
        var o = TiliaCore._connect(x, (function () {
                m.called = true;
              }));
        t.is(x.name, "John");
        t.is(m.called, false);
        x.name = "One";
        t.is(m.called, false);
        TiliaCore._flush(o);
        x.name = "One";
        t.is(m.called, false);
        x.name = "Two";
        t.is(m.called, true);
        m.called = false;
        x.name = "Three";
        t.is(m.called, false);
      }));

Ava("Should observe", (function (t) {
        var p = {
          name: "John",
          username: "jo"
        };
        var p$1 = TiliaCore.make(p);
        TiliaCore.observe(p$1, (function (p) {
                p.username = p.name.toLowerCase().slice(0, 2);
              }));
        t.is(p$1.username, "jo");
        p$1.name = "John";
        t.is(p$1.username, "jo");
        p$1.name = "Mary";
        t.is(p$1.username, "ma");
      }));

Ava("Should allow mutating observed", (function (t) {
        var p = {
          name: "John",
          username: "jo"
        };
        var p$1 = TiliaCore.make(p);
        TiliaCore.observe(p$1, (function (p) {
                p.name = p.name.toLowerCase().slice(0, 2);
              }));
        t.is(p$1.name, "jo");
        p$1.name = "John";
        t.is(p$1.name, "jo");
        p$1.name = "Mary";
        t.is(p$1.name, "ma");
      }));

Ava("Should proxy sub-objects", (function (t) {
        var m = {
          called: false
        };
        var p = {
          name: "John",
          address: {
            city: "Love",
            zip: 1234
          },
          passions: [],
          notes: make()
        };
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(p$1.address.city, "Love");
        t.is(m.called, false);
        p$1.address.city = "Passion";
        t.is(m.called, false);
        TiliaCore._flush(o);
        p$1.address.city = "Passion";
        t.is(m.called, false);
        p$1.address.city = "Kindness";
        t.is(m.called, true);
        m.called = false;
        p$1.address.city = "Sorrow";
        t.is(m.called, false);
      }));

Ava("Should proxy array", (function (t) {
        var m = {
          called: false
        };
        var p = {
          name: "John",
          address: {
            city: "Love",
            zip: 1234
          },
          passions: ["fruits"],
          notes: make()
        };
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(p$1.passions[0], "fruits");
        TiliaCore._flush(o);
        p$1.passions[0] = "watercolor";
        t.is(m.called, true);
      }));

Ava("Should watch array index", (function (t) {
        var m = {
          called: false
        };
        var p = {
          name: "John",
          address: {
            city: "Love",
            zip: 1234
          },
          passions: ["fruits"],
          notes: make()
        };
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(p$1.passions.length, 1);
        TiliaCore._flush(o);
        p$1.passions.push("watercolor");
        t.is(m.called, true);
      }));

Ava("Should watch object keys", (function (t) {
        var m = {
          called: false
        };
        var p = {
          name: "John",
          address: {
            city: "Love",
            zip: 1234
          },
          passions: ["fruits"],
          notes: make()
        };
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(Object.keys(p$1.notes).length, 0);
        TiliaCore._flush(o);
        Reflect.set(p$1.notes, "2024-12-07", "Rebuilding Tilia in ReScript");
        t.is(m.called, true);
      }));

Ava("Should throw on connect to non tilia object", (function (t) {
        try {
          TiliaCore._connect({
                name: "Not a tree",
                username: "Ho"
              }, (function () {
                  
                }));
          return ;
        }
        catch (raw_obj){
          var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
          if (obj.RE_EXN_ID === Js_exn.$$Error) {
            t.is(obj._1.message, "Observed state is not a tilia proxy.");
            return ;
          }
          throw obj;
        }
      }));

var Core;

export {
  Core ,
  $$Object ,
}
/*  Not a pure module */
