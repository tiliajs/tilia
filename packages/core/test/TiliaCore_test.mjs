// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as TiliaCore from "../src/TiliaCore.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var make = (() => ({}));

var TestObject = {
  make: make
};

function setReadonly(o, k, v) {
  Object.defineProperty(o, k, {
        writable: false,
        value: v
      });
}

function readonly(o, k) {
  var d = Object.getOwnPropertyDescriptor(o, k);
  if (d === null || d === undefined) {
    return false;
  } else {
    return d.writable === false;
  }
}

var AnyObject = {
  setReadonly: setReadonly,
  readonly: readonly
};

function person() {
  return {
          name: "John",
          address: {
            city: "Truth",
            zip: 1234
          },
          other_address: {
            city: "Beauty",
            zip: 5678
          },
          passions: ["fruits"],
          notes: make()
        };
}

Ava("Should track leaf changes", (function (t) {
        var m = {
          called: false
        };
        var p = {
          name: "John",
          username: "jo"
        };
        var x = TiliaCore.make(p);
        var o = TiliaCore._connect(x, (function () {
                m.called = true;
              }));
        t.is(x.name, "John");
        t.is(m.called, false);
        x.name = "One";
        t.is(m.called, false);
        TiliaCore._flush(o);
        x.name = "One";
        t.is(m.called, false);
        x.name = "Two";
        t.is(m.called, true);
        m.called = false;
        x.name = "Three";
        t.is(m.called, false);
      }));

Ava("Should observe", (function (t) {
        var p = {
          name: "John",
          username: "jo"
        };
        var p$1 = TiliaCore.make(p);
        TiliaCore.observe(p$1, (function (p) {
                p.username = p.name.toLowerCase().slice(0, 2);
              }));
        t.is(p$1.username, "jo");
        p$1.name = "John";
        t.is(p$1.username, "jo");
        p$1.name = "Mary";
        t.is(p$1.username, "ma");
      }));

Ava("Should allow mutating observed", (function (t) {
        var p = {
          name: "John",
          username: "jo"
        };
        var p$1 = TiliaCore.make(p);
        TiliaCore.observe(p$1, (function (p) {
                p.name = p.name.toLowerCase().slice(0, 2);
              }));
        t.is(p$1.name, "jo");
        p$1.name = "John";
        t.is(p$1.name, "jo");
        p$1.name = "Mary";
        t.is(p$1.name, "ma");
      }));

Ava("Should proxy sub-objects", (function (t) {
        var m = {
          called: false
        };
        var p = person();
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(p$1.address.city, "Truth");
        t.is(m.called, false);
        p$1.address.city = "Passion";
        t.is(m.called, false);
        TiliaCore._flush(o);
        p$1.address.city = "Passion";
        t.is(m.called, false);
        p$1.address.city = "Kindness";
        t.is(m.called, true);
        m.called = false;
        p$1.address.city = "Sorrow";
        t.is(m.called, false);
      }));

Ava("Should proxy array", (function (t) {
        var m = {
          called: false
        };
        var p = person();
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(p$1.passions[0], "fruits");
        TiliaCore._flush(o);
        p$1.passions[0] = "watercolor";
        t.is(m.called, true);
      }));

Ava("Should watch array index", (function (t) {
        var m = {
          called: false
        };
        var p = person();
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(p$1.passions.length, 1);
        TiliaCore._flush(o);
        p$1.passions.push("watercolor");
        t.is(m.called, true);
      }));

Ava("Should watch object keys", (function (t) {
        var m = {
          called: false
        };
        var p = person();
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(Object.keys(p$1.notes).length, 0);
        TiliaCore._flush(o);
        Reflect.set(p$1.notes, "2024-12-07", "Rebuilding Tilia in ReScript");
        t.is(m.called, true);
      }));

Ava("Should watch each object key", (function (t) {
        var m = {
          called: false
        };
        var p = person();
        Reflect.set(p.notes, "day", "Seems ok");
        Reflect.set(p.notes, "night", "Seems good");
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(Object.keys(p$1.notes).length, 2);
        TiliaCore._flush(o);
        Reflect.set(p$1.notes, "night", "Full of stars");
        t.is(m.called, true);
      }));

Ava("Should throw on connect to non tilia object", (function (t) {
        var error;
        try {
          TiliaCore._connect({
                name: "Not a tree",
                username: "Ho"
              }, (function () {
                  
                }));
          error = "Did not throw";
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          if (err.RE_EXN_ID === Js_exn.$$Error) {
            error = err._1.message;
          } else {
            throw err;
          }
        }
        t.is(error, "Observed state is not a tilia proxy.");
      }));

Ava("Should not clone added objects", (function (t) {
        var p = person();
        var a = {
          city: "Storm",
          zip: 9999
        };
        var p$1 = TiliaCore.make(p);
        p$1.address = a;
        t.is(p$1.address.city, "Storm");
        p$1.address.city = "Rain";
        t.is(a.city, "Rain");
      }));

Ava("Should share tracking in same tree", (function (t) {
        var m = {
          called: false
        };
        var p = person();
        var p$1 = TiliaCore.make(p);
        var o = TiliaCore._connect(p$1, (function () {
                m.called = true;
              }));
        t.is(p$1.address.city, "Truth");
        TiliaCore._flush(o);
        t.false(m.called);
        p$1.other_address = p$1.address;
        p$1.other_address.city = "Love";
        t.true(p$1.address === p$1.other_address);
        t.true(m.called);
      }));

Ava("Should not share tracking in another tree", (function (t) {
        var m = {
          called: false
        };
        var p1 = TiliaCore.make(person());
        var p2 = TiliaCore.make(person());
        var o = TiliaCore._connect(p1, (function () {
                m.called = true;
              }));
        t.is(p1.address.city, "Truth");
        TiliaCore._flush(o);
        t.false(m.called);
        p2.other_address = p1.address;
        p2.other_address.city = "Love";
        t.false(m.called);
        t.is(p1.address.city, "Love");
        p1.address.city = "Life";
        t.true(m.called);
      }));

Ava("Should notify on key deletion", (function (t) {
        var m = {
          called: false
        };
        var p = TiliaCore.make(person());
        Reflect.set(p.notes, "hello", "Everyone");
        var o = TiliaCore._connect(p, (function () {
                m.called = true;
              }));
        t.is(Reflect.get(p.notes, "hello"), "Everyone");
        TiliaCore._flush(o);
        Reflect.deleteProperty(p.notes, "hello");
        t.is(m.called, true);
      }));

Ava("Should not proxy or watch prototype methods", (function (t) {
        var m = {
          called: false
        };
        var p = TiliaCore.make(person());
        var o = TiliaCore._connect(p, (function () {
                m.called = true;
              }));
        var x = Reflect.get(p.notes, "constructor");
        t.true(x === Reflect.get({}, "constructor"));
        TiliaCore._flush(o);
        Reflect.set(p.notes, "constructor", "haha");
        t.is(m.called, false);
      }));

Ava("Should not proxy readonly properties", (function (t) {
        var m = {
          called: false
        };
        var p1 = person();
        var tree = {};
        setReadonly(tree, "person", p1);
        t.true(readonly(tree, "person"));
        var tree$1 = TiliaCore.make(tree);
        var o = TiliaCore._connect(tree$1, (function () {
                m.called = true;
              }));
        var p2 = Reflect.get(tree$1, "person");
        t.true(p2 === p1);
        TiliaCore._flush(o);
        t.false(Reflect.set(tree$1, "person", person()));
        t.is(m.called, false);
        t.true(Reflect.get(tree$1, "person") === p1);
      }));

var Core;

export {
  Core ,
  TestObject ,
  AnyObject ,
  person ,
}
/*  Not a pure module */
