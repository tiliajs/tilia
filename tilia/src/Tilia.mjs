// Generated by ReScript, PLEASE EDIT WITH CARE


var raise = (function (message) {
  throw new Error(message)
});

var symbol = (function(s) {
  return Symbol.for('tilia:' + s);
});

var indexKey = symbol("indexKey");

var metaKey = symbol("metaKey");

var computeKey = symbol("computeKey");

var ctxKey = symbol("ctx");

function noop() {
  
}

var proxiable = (function(v) {
  if ( typeof v === 'object' && v !== null) {
    const proto = Object.getPrototypeOf(v)
    return proto === Object.prototype || proto === Array.prototype || proto === null
  }
  return false;
});

var compute = (function(v) {
  return typeof v === 'object' && v !== null && v[computeKey] ? v : undefined;
});

function readonly(o, k) {
  var d = Object.getOwnPropertyDescriptor(o, k);
  if (d === null || d === undefined) {
    return false;
  } else {
    return d.writable === false;
  }
}

function _meta(p) {
  return Reflect.get(p, metaKey);
}

function observeKey(observed, key) {
  var w = observed.get(key);
  if (!(w === null || w === undefined)) {
    return w;
  }
  w === null;
  var w$1 = {
    state: "Pristine",
    key: key,
    observed: observed,
    observers: new Set()
  };
  observed.set(key, w$1);
  return w$1;
}

function flush(root) {
  if (root.expired.size > 0) {
    while(root.expired.size > 0) {
      var expired = root.expired;
      root.expired = new Set();
      expired.forEach(function (observer) {
            observer.notify();
          });
    };
  }
  var gc = root.gc;
  if (gc.active.size >= gc.threshold) {
    gc.quarantine.forEach(function (w) {
          if (w.state === "Pristine" && w.observers.size === 0) {
            w.state = "Cleared";
            w.observed.delete(w.key);
            return ;
          }
          
        });
    gc.quarantine = gc.active;
    gc.active = new Set();
    return ;
  }
  
}

function clearObserver(root, observer) {
  observer.observing.forEach(function (watchers) {
        if (watchers.state === "Pristine" && watchers.observers.delete(observer) && watchers.observers.size === 0) {
          root.gc.active.add(watchers);
          return ;
        }
        
      });
  var o = root.observer;
  if (o === null || o === undefined || o !== observer) {
    return ;
  } else {
    root.observer = undefined;
    if (!root.lock) {
      return flush(root);
    } else {
      return ;
    }
  }
}

function setReady(root, observer, notifyIfChanged) {
  observer.observing.find(function (w, idx) {
        var match = w.state;
        switch (match) {
          case "Pristine" :
              w.observers.add(observer);
              return false;
          case "Changed" :
          case "Cleared" :
              break;
          
        }
        if (notifyIfChanged) {
          clearObserver(root, observer);
          observer.notify();
          return true;
        }
        var w$1 = observeKey(w.observed, w.key);
        w$1.observers.add(observer);
        observer.observing[idx] = w$1;
        return false;
      });
  var o = root.observer;
  if (o === null || o === undefined || o !== observer) {
    return ;
  } else {
    root.observer = undefined;
    if (!root.lock) {
      return flush(root);
    } else {
      return ;
    }
  }
}

function notify(root, observed, key) {
  var watchers = observed.get(key);
  if (watchers === null || watchers === undefined) {
    return ;
  }
  observed.delete(key);
  watchers.state = "Changed";
  var expired = root.expired;
  watchers.observers.forEach(function (observer) {
        clearObserver(root, observer);
        expired.add(observer);
      });
  var match = root.observer;
  if (!(match === null || match === undefined)) {
    return ;
  }
  match === null;
  if (!root.lock) {
    return flush(root);
  }
  
}

function set(root, observed, proxied, computes, isArray, _fromComputed, target, _key, _value) {
  while(true) {
    var value = _value;
    var key = _key;
    var fromComputed = _fromComputed;
    var hadKey = Reflect.has(target, key);
    var prev = Reflect.get(target, key);
    var proxiable$1 = proxiable(value);
    var same;
    if (proxiable$1) {
      var m = _meta(value);
      same = m === null || m === undefined ? prev === value : m.target === prev;
    } else {
      same = prev === value;
    }
    if (same) {
      return true;
    }
    if (!Reflect.set(target, key, value)) {
      return false;
    }
    var key$1 = isArray && key === "length" ? indexKey : key;
    if (proxiable$1) {
      proxied.delete(key$1);
    }
    if (!fromComputed) {
      var match = computes.get(key$1);
      if (match === null || match === undefined) {
        match === null;
      } else {
        var clear = match.clear;
        computes.delete(key$1);
        clear();
      }
    }
    var compute$1 = compute(value);
    if (compute$1 === null || compute$1 === undefined) {
      compute$1 === null;
    } else {
      setupComputed(root, observed, proxied, computes, isArray, target, key$1, compute$1);
      var w = observed.get(key$1);
      if (w === null || w === undefined) {
        return true;
      }
      if (!(w.state === "Pristine" && w.observers.size > 0)) {
        return true;
      }
      var v = compute$1.rebuild();
      _value = v;
      _key = key$1;
      _fromComputed = true;
      continue ;
    }
    notify(root, observed, key$1);
    if (!hadKey) {
      notify(root, observed, indexKey);
    }
    return true;
  };
}

function setupComputed(root, observed, proxied, computes, isArray, target, key, compute) {
  var lastValue = {
    v: undefined
  };
  var observer = {
    o: undefined
  };
  var callback = compute.rebuild;
  var notify = function () {
    var v = Reflect.get(target, key);
    if (v !== compute) {
      lastValue.v = v;
    }
    var w = observed.get(key);
    if (w === null || w === undefined) {
      w === null;
    } else {
      if (w.observers.size > 0) {
        var v$1 = rebuild();
        set(root, observed, proxied, computes, isArray, true, target, key, v$1);
        return ;
      }
      w.state = "Changed";
      observed.delete(key);
      Reflect.deleteProperty(proxied, key);
      Reflect.set(target, key, compute);
      return ;
    }
    Reflect.deleteProperty(proxied, key);
    Reflect.set(target, key, compute);
  };
  var rebuild = function () {
    Reflect.set(target, key, lastValue.v);
    var o_observing = [];
    var o = {
      notify: notify,
      observing: o_observing
    };
    observer.o = o;
    var previous = root.observer;
    root.observer = o;
    var v = callback();
    root.observer = previous;
    setReady(root, o, false);
    return v;
  };
  compute.rebuild = rebuild;
  compute.clear = (function () {
      var o = observer.o;
      if (o === null || o === undefined) {
        return ;
      }
      clearObserver(root, o);
      ((o.observing.length = 0));
    });
  computes.set(key, compute);
}

function proxify(root, _target) {
  while(true) {
    var target = _target;
    var proxied = new Map();
    var observed = new Map();
    var computes = new Map();
    var m = _meta(target);
    if (m === null || m === undefined) {
      m === null;
    } else {
      if (m.root === root) {
        return m;
      }
      _target = m.target;
      continue ;
    }
    var meta = ({root, target, observed, proxied, computes});
    var isArray = Array.isArray(target);
    var proxy = new Proxy(target, {
          set: (function(proxied,observed,computes,isArray){
          return function (extra, extra$1, extra$2) {
            return set(root, observed, proxied, computes, isArray, false, extra, extra$1, extra$2);
          }
          }(proxied,observed,computes,isArray)),
          deleteProperty: (function(proxied,observed,computes){
          return function (extra, extra$1) {
            var res = Reflect.deleteProperty(extra, extra$1);
            proxied.delete(extra$1);
            var match = computes.get(extra$1);
            if (match === null || match === undefined) {
              match === null;
            } else {
              var clear = match.clear;
              clear();
              computes.delete(extra$1);
            }
            notify(root, observed, extra$1);
            return res;
          }
          }(proxied,observed,computes)),
          get: (function(proxied,observed,computes,isArray){
          return function (extra, extra$1) {
            if (extra$1 === metaKey) {
              return meta;
            }
            if (extra$1 === computeKey) {
              return false;
            }
            var v = Reflect.get(extra, extra$1);
            var own = Object.hasOwn(extra, extra$1);
            if (!(v === undefined || own)) {
              return v;
            }
            var o = root.observer;
            if (o === null || o === undefined) {
              o === null;
            } else if (isArray && extra$1 === "length") {
              var w = observeKey(observed, indexKey);
              o.observing.push(w);
            } else {
              var w$1 = observeKey(observed, extra$1);
              o.observing.push(w$1);
            }
            if (!(proxiable(v) && !readonly(extra, extra$1))) {
              return v;
            }
            var compute$1 = compute(v);
            var exit = 0;
            if (compute$1 === null || compute$1 === undefined) {
              exit = 1;
            } else {
              if (compute$1.clear === noop) {
                setupComputed(root, observed, proxied, computes, isArray, extra, extra$1, compute$1);
              }
              var v$1 = compute$1.rebuild();
              Reflect.set(extra, extra$1, v$1);
              if (!(proxiable(v$1) && !readonly(extra, extra$1))) {
                return v$1;
              }
              var m = proxify(root, v$1);
              proxied.set(extra$1, m);
              return m.proxy;
            }
            if (exit === 1) {
              var m$1 = proxied.get(extra$1);
              var exit$1 = 0;
              if (!(m$1 === null || m$1 === undefined)) {
                return m$1.proxy;
              }
              exit$1 = 2;
              if (exit$1 === 2) {
                var m$2 = proxify(root, v);
                proxied.set(extra$1, m$2);
                return m$2.proxy;
              }
              
            }
            
          }
          }(proxied,observed,computes,isArray)),
          ownKeys: (function(observed){
          return function (extra) {
            var keys = Reflect.ownKeys(extra);
            var o = root.observer;
            if (o === null || o === undefined) {
              o === null;
            } else {
              var w = observeKey(observed, indexKey);
              o.observing.push(w);
            }
            return keys;
          }
          }(observed))
        });
    meta.proxy = proxy;
    return meta;
  };
}

function makeTilia(root) {
  return function (value) {
    if (!proxiable(value)) {
      raise("tilia: value is not an object or array");
    }
    return proxify(root, value).proxy;
  };
}

function makeObserve(root) {
  return function (callback) {
    var notify = function () {
      var observer_observing = [];
      var observer = {
        notify: notify,
        observing: observer_observing
      };
      root.observer = observer;
      var o = observer;
      callback();
      setReady(root, o, true);
    };
    notify();
  };
}

function makeBatch(root) {
  return function (callback) {
    if (root.lock) {
      return callback();
    } else {
      root.lock = true;
      callback();
      root.lock = false;
      return flush(root);
    }
  };
}

function computed(callback) {
  var v = {
    clear: noop,
    rebuild: callback
  };
  Reflect.set(v, computeKey, true);
  return v;
}

function makeSignal(tilia) {
  return function (value) {
    var s = tilia({
          value: value
        });
    var set = function (v) {
      Reflect.set(s, "value", v);
    };
    return [
            s,
            set
          ];
  };
}

function makeStore(signal) {
  return function (init) {
    var match = signal(undefined);
    var set = match[1];
    set(computed(function () {
              var v = init(set);
              set(v);
              return v;
            }));
    return match[0];
  };
}

function makeObserve_(root) {
  return function (notify) {
    var observer_observing = [];
    var observer = {
      notify: notify,
      observing: observer_observing
    };
    root.observer = observer;
    return observer;
  };
}

function makeReady_(root) {
  return function (observer, notifyIfChanged) {
    setReady(root, observer, notifyIfChanged);
  };
}

function connector(tilia, computed, observe, batch, signal, store, _observe, _done, _ready, _clear) {
  return {
    // 
    tilia,
    computed, 
    observe,
    batch,
    // extra
    signal,
    store,
    // internal
    _observe,
    _done,
    _ready,
    _clear,
    _meta,
  };
}
;

function make(gcOpt) {
  var gc = gcOpt !== undefined ? gcOpt : 50;
  var gc$1 = {
    active: new Set(),
    quarantine: new Set(),
    threshold: gc
  };
  var root = {
    observer: undefined,
    expired: new Set(),
    lock: false,
    gc: gc$1
  };
  var tilia = makeTilia(root);
  var signal = makeSignal(tilia);
  return connector(tilia, computed, makeObserve(root), makeBatch(root), signal, makeStore(signal), makeObserve_(root), (function (_observer) {
                root.observer = undefined;
              }), makeReady_(root), (function (observer) {
                clearObserver(root, observer);
              }), _meta);
}

var ctx = Reflect.get(globalThis, ctxKey);

var _ctx;

var exit = 0;

if (ctx === null || ctx === undefined) {
  exit = 1;
} else {
  _ctx = ctx;
}

if (exit === 1) {
  var ctx$1 = make(undefined);
  Reflect.set(globalThis, ctxKey, ctx$1);
  _ctx = ctx$1;
}

var tilia = _ctx.tilia;

var observe = _ctx.observe;

var batch = _ctx.batch;

var signal = _ctx.signal;

var store = _ctx.store;

var _observe = _ctx._observe;

var _done = _ctx._done;

var _ready = _ctx._ready;

var _clear = _ctx._clear;

export {
  make ,
  tilia ,
  computed ,
  observe ,
  signal ,
  store ,
  batch ,
  _observe ,
  _done ,
  _ready ,
  _clear ,
  _meta ,
  _ctx ,
}
/* indexKey Not a pure module */
