// Generated by ReScript, PLEASE EDIT WITH CARE


var indexKey = (Symbol());

var trackKey = (Symbol());

var metaKey = (Symbol());

var computeKey = (Symbol());

function noop() {
  
}

var object = (function(v) {
  return typeof v === 'object' && v !== null;
});

var compute = (function(v) {
  return typeof v === 'object' && v !== null && v[computeKey] ? v : undefined;
});

function readonly(o, k) {
  var d = Object.getOwnPropertyDescriptor(o, k);
  if (d === null || d === undefined) {
    return false;
  } else {
    return d.writable === false;
  }
}

function _meta(p) {
  return Reflect.get(p, metaKey);
}

function _connect(p, notify) {
  var match = Reflect.get(p, metaKey);
  if (match === null || match === undefined) {
    if (match === null) {
      throw new Error("Observed state is not a tilia proxy.");
    }
    throw new Error("Observed state is not a tilia proxy.");
  } else {
    var root = match.root;
    var observer_observing = [];
    var observer = {
      notify: notify,
      clear: undefined,
      observing: observer_observing,
      root: root
    };
    root.observer = observer;
    return observer;
  }
}

function observeKey(observed, key) {
  var w = observed.get(key);
  if (!(w === null || w === undefined)) {
    return w;
  }
  w === null;
  var w$1 = {
    state: "Pristine",
    key: key,
    observed: observed,
    observers: new Set()
  };
  observed.set(key, w$1);
  return w$1;
}

function _clear(observer) {
  observer.observing.forEach(function (watchers) {
        if (watchers.state === "Pristine" && watchers.observers.delete(observer) && watchers.observers.size === 0) {
          watchers.state = "Cleared";
          watchers.observed.delete(watchers.key);
          return ;
        }
        
      });
}

function clear(observer) {
  _clear(observer);
  var fn = observer.clear;
  if (fn === null || fn === undefined) {
    return ;
  } else {
    return fn();
  }
}

function _ready(observer, notifyIfChangedOpt) {
  var notifyIfChanged = notifyIfChangedOpt !== undefined ? notifyIfChangedOpt : true;
  var root = observer.root;
  var o = root.observer;
  if (o === null || o === undefined) {
    o === null;
  } else if (o === observer) {
    root.observer = undefined;
  }
  observer.observing.find(function (w, idx) {
        var match = w.state;
        switch (match) {
          case "Pristine" :
              w.observers.add(observer);
              return false;
          case "Changed" :
              if (notifyIfChanged) {
                _clear(observer);
                observer.notify();
                return true;
              }
              break;
          case "Cleared" :
              break;
          
        }
        var w$1 = observeKey(w.observed, w.key);
        w$1.observers.add(observer);
        observer.observing[idx] = w$1;
        return false;
      });
}

function notify(observed, key) {
  var watchers = observed.get(key);
  if (watchers === null || watchers === undefined) {
    return ;
  }
  observed.delete(key);
  watchers.state = "Changed";
  watchers.observers.forEach(function (observer) {
        _clear(observer);
        observer.notify();
      });
}

function set(root, base, observed, proxied, computes, target, key, _value) {
  while(true) {
    var value = _value;
    var hadKey = Reflect.has(target, key);
    var prev = Reflect.get(target, key);
    if (prev === value) {
      return true;
    }
    if (!Reflect.set(target, key, value)) {
      return false;
    }
    if (object(prev)) {
      proxied.delete(key);
    }
    var compute$1 = compute(value);
    if (compute$1 === null || compute$1 === undefined) {
      compute$1 === null;
    } else {
      var match = computes.get(key);
      if (match === null || match === undefined) {
        match === null;
      } else {
        var clear = match.clear;
        clear();
        computes.delete(key);
      }
      setupComputed(root, base, observed, proxied, computes, target, key, compute$1);
      if (!observed.has(key)) {
        if (root.triggers !== undefined) {
          notify(observed, key);
          return true;
        } else {
          return true;
        }
      }
      _value = compute$1.rebuild(base.proxy);
      continue ;
    }
    notify(observed, key);
    if (!hadKey) {
      notify(observed, indexKey);
    }
    return true;
  };
}

function setupComputed(root, base, observed, proxied, computes, target, key, compute) {
  var lastValue = {
    v: compute.initValue
  };
  var observer = {
    o: undefined
  };
  var callback = compute.rebuild;
  var notify = function () {
    var v = Reflect.get(target, key);
    if (v !== compute) {
      lastValue.v = v;
    }
    if (observed.has(key) || root.triggers !== undefined) {
      set(root, base, observed, proxied, computes, target, key, rebuild(base.proxy));
    } else {
      Reflect.deleteProperty(proxied, key);
      Reflect.set(target, key, compute);
    }
  };
  var rebuild = function (p) {
    Reflect.set(target, key, lastValue.v);
    var o_observing = [];
    var o = {
      notify: notify,
      clear: undefined,
      observing: o_observing,
      root: root
    };
    observer.o = o;
    var previous = root.observer;
    root.observer = o;
    var v = callback(p);
    _ready(o, false);
    root.observer = previous;
    return v;
  };
  compute.rebuild = rebuild;
  compute.clear = (function () {
      var o = observer.o;
      if (o === null || o === undefined) {
        return ;
      } else {
        return _clear(o);
      }
    });
  computes.set(key, compute);
}

function proxify(root, base, _target) {
  while(true) {
    var target = _target;
    var proxied = new Map();
    var observed = new Map();
    var computes = new Map();
    var m = Reflect.get(target, metaKey);
    if (m === null || m === undefined) {
      m === null;
    } else {
      if (m.root === root) {
        return m;
      }
      _target = m.target;
      continue ;
    }
    var meta = ({root, target, observed, proxied, computes});
    var isArray = Array.isArray(target);
    var proxy = new Proxy(target, {
          set: (function(proxied,observed,computes){
          return function (extra, extra$1, extra$2) {
            return set(root, base, observed, proxied, computes, extra, extra$1, extra$2);
          }
          }(proxied,observed,computes)),
          deleteProperty: (function(proxied,observed,computes){
          return function (extra, extra$1) {
            var res = Reflect.deleteProperty(extra, extra$1);
            proxied.delete(extra$1);
            var match = computes.get(extra$1);
            if (match === null || match === undefined) {
              match === null;
            } else {
              var clear = match.clear;
              clear();
              computes.delete(extra$1);
            }
            notify(observed, extra$1);
            return res;
          }
          }(proxied,observed,computes)),
          get: (function(proxied,observed,computes,isArray){
          return function (extra, extra$1) {
            if (extra$1 === metaKey) {
              return meta;
            }
            var v = Reflect.get(extra, extra$1);
            var own = Object.hasOwn(extra, extra$1);
            if (!(v === undefined || own)) {
              return v;
            }
            var o = root.observer;
            if (o === null || o === undefined) {
              o === null;
            } else if (isArray && extra$1 === "length") {
              var w = observeKey(observed, indexKey);
              o.observing.push(w);
            } else {
              var w$1 = observeKey(observed, extra$1);
              o.observing.push(w$1);
            }
            if (!(object(v) && !readonly(extra, extra$1))) {
              return v;
            }
            var compute$1 = compute(v);
            var exit = 0;
            if (compute$1 === null || compute$1 === undefined) {
              exit = 1;
            } else {
              if (compute$1.clear !== noop) {
                return compute$1.rebuild(base.proxy);
              }
              setupComputed(root, base, observed, proxied, computes, extra, extra$1, compute$1);
              var v$1 = compute$1.rebuild(base.proxy);
              Reflect.set(extra, extra$1, v$1);
              if (!(object(v$1) && !readonly(extra, extra$1))) {
                return v$1;
              }
              var m = proxify(root, base, v$1);
              proxied.set(extra$1, m);
              return m.proxy;
            }
            if (exit === 1) {
              var m$1 = proxied.get(extra$1);
              var exit$1 = 0;
              if (!(m$1 === null || m$1 === undefined)) {
                return m$1.proxy;
              }
              exit$1 = 2;
              if (exit$1 === 2) {
                var m$2 = proxify(root, base, v);
                proxied.set(extra$1, m$2);
                return m$2.proxy;
              }
              
            }
            
          }
          }(proxied,observed,computes,isArray)),
          ownKeys: (function(observed){
          return function (extra) {
            var keys = Reflect.ownKeys(extra);
            var o = root.observer;
            if (o === null || o === undefined) {
              o === null;
            } else {
              var w = observeKey(observed, indexKey);
              o.observing.push(w);
            }
            return keys;
          }
          }(observed))
        });
    meta.proxy = proxy;
    return meta;
  };
}

function timeOutFlush(fn) {
  setTimeout((function () {
          fn();
        }), 0);
}

function connect(root, branchp) {
  var base = {
    proxy: undefined
  };
  var proxy = proxify(root, base, branchp).proxy;
  base.proxy = proxy;
  return proxy;
}

function tilia(flushOpt) {
  var flush = flushOpt !== undefined ? flushOpt : timeOutFlush;
  return {
          observer: undefined,
          triggers: undefined,
          flush: flush
        };
}

function observe(p, callback) {
  var notify = function () {
    var o = _connect(p, notify);
    callback(p);
    _ready(o, false);
  };
  notify();
}

function track(p, callback) {
  var match = Reflect.get(p, metaKey);
  if (match === null || match === undefined) {
    if (match === null) {
      throw new Error("Observed state is not a tilia proxy.");
    }
    throw new Error("Observed state is not a tilia proxy.");
  } else {
    var observer_notify = function () {
      callback(p);
    };
    var observer_observing = [];
    var observer_root = match.root;
    var observer = {
      notify: observer_notify,
      clear: undefined,
      observing: observer_observing,
      root: observer_root
    };
    var w = observeKey(match.observed, trackKey);
    w.observers.add(observer);
    observer_observing.push(w);
    return observer;
  }
}

function computed(initValue, callback) {
  var v = {
    initValue: initValue,
    clear: noop,
    rebuild: callback
  };
  Reflect.set(v, computeKey, true);
  return v;
}

export {
  tilia ,
  connect ,
  observe ,
  track ,
  clear ,
  _connect ,
  _ready ,
  _meta ,
  computed ,
}
/* indexKey Not a pure module */
